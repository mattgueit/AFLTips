@page "/tips"
@inject HttpClient Http
@using data = AFLTips.Shared.DataModels
@using view = AFLTips.Shared.ViewModels


@if (currentRound == 0 || players == null)
{
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}
else
{
    <div class="container mt-4 mb-4">
        <div class="justify-content-around col-12">
            <form>
                <div class="row justify-content-center mb-3">
                    <select class="selectpicker form-control col-6" aria-label="player select">
                        @foreach (var player in players)
                        {
                            <option value="@player.PlayerId">@player.PlayerName</option>
                        }
                    </select>
                </div>
                <!-- Round -->
                <div class="col-12">
                    <h4 class="text-center">Round @currentRound</h4>
                </div>
                @foreach (var matchGroup in groupedMatches)
                {
                    <!-- Date headers -->
                    <div class="col-12">
                        <h5 class="text-center">@matchGroup.MatchDate.ToString("dddd, MMMM dd")</h5>
                        <hr />
                    </div>

                    @foreach (var match in matchGroup.Matches)
                    {
                        <div class="input-group justify-content-center">
                            <!-- Home team -->
                            <div class="form-check form-check-inline justify-content-end col-3">
                                <label class="form-check-label" for="inlineCheckBox">@match.HomeTeamName</label>
                                <img class="ml-3" src="/images/team-logos/@(match.HomeTeamId).png" alt="Image" width="30" height="30">
                                <input class="form-check-input ml-5" type="radio" name="tip-@match.HomeTeamId-@match.AwayTeamId" id="inlineCheckBox" value="@match.HomeTeamId">
                            </div>

                            <!-- Venue & time -->
                            <div class="col-2">
                                <div class="col-12 text-center"><small class="text-muted">@match.Venue</small></div>
                                <div class="col-12 text-center"><small class="text-muted">@match.MatchDate.ToString("hh:mm tt")</small></div>
                            </div>

                            <!-- Away team -->
                            <div class="form-check form-check-inline justify-content-start col-3">
                                <input class="form-check-input mr-5" type="radio" name="tip-@match.HomeTeamId-@match.AwayTeamId" id="inlineCheckBox" value="@match.AwayTeamId">
                                <img class="mr-3" src="/images/team-logos/@(match.AwayTeamId).png" alt="Image" width="30" height="30">
                                <label class="form-check-label" for="inlineCheckBox">@match.AwayTeamName</label>
                            </div>

                        </div>
                        <br />
                    }

                }
                <div class="row justify-content-center">
                    <div class="col-10"></div>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </div>
            </form>
        </div>
    </div>

    <style>
        #inlineCheckBox {
            transform: scale(1.3)
        }
    </style>
}

@code {
    private int currentRound;
    private List<data.Player> players;
    private List<view.GroupedMatches> groupedMatches;

    protected async override Task OnInitializedAsync()
    {
        var getCurrentRoundTask = Http.GetFromJsonAsync<int>("api/fixture/currentRound");
        var getPlayersTask = Http.GetFromJsonAsync<List<data.Player>>("api/player");

        await Task.WhenAll(getCurrentRoundTask, getPlayersTask);

        currentRound = getCurrentRoundTask.Result;
        players = getPlayersTask.Result;

        groupedMatches = await Http.GetFromJsonAsync<List<view.GroupedMatches>>($"api/fixture/groupedMatchesByRound?RoundId={currentRound}");
    }
}

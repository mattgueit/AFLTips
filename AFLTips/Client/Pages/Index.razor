@page "/"
@inject HttpClient Http
@using data = AFLTips.Shared.DataModels

@if (currentRound == 0 || tippingScores == null)
{
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}
else
{
    <div class="container-fluid">
        <div class="row justify-content-start">
            <div class="col-11">
                <h1>ROUND @currentRound</h1> <!--style="float:left"-->
            </div>
            <div class="col-1">
                <span id="refresh-button" class="oi oi-loop-circular" aria-hidden="true" @onclick="RefreshData"></span>
            </div>
        </div>
    </div>
    <span />
    <div class="container-fluid">
        <div class="row justify-content-around">
            <div class="col-4">
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Player</th>
                            <th>Score</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var tippingScore in tippingScores)
                        {
                            <tr>
                                <td>@tippingScore.PlayerName</td>
                                <td>@tippingScore.PlayerScore</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

<style>
    #refresh-button {
        float: right;
        font-size: 200%;
    }

        #refresh-button:active {
            transform: rotate(90deg);
        }
</style>

@code {
    private int currentRound;
    private List<data.TippingScore> tippingScores;

    protected async override Task OnInitializedAsync()
    {
        var getCurrentRoundTask = Http.GetFromJsonAsync<int>("api/fixture/currentRound");
        var getTippingScoresTask = Http.GetFromJsonAsync<List<data.TippingScore>>("api/tip/scores");

        await Task.WhenAll(getCurrentRoundTask, getTippingScoresTask);

        currentRound = getCurrentRoundTask.Result;
        tippingScores = getTippingScoresTask.Result;
    }

    private async void RefreshData()
    {
        await Http.GetAsync("api/fixture/update");
    }
}